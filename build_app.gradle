// 添加replugin
apply plugin: 'replugin-host-gradle'
repluginHostConfig {
    useAppCompat = true
}

dependencies {

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    kapt "com.android.databinding:compiler:$android_plugin_version"
    // ---Rx---
    implementation project(':vlayout')
    testCompile 'junit:junit:4.12'
    //implementation libs.appcompat_v7
    implementation libs.constraint_layout
    implementation libs.cardview_v7
    implementation libs.rxbinding2
    implementation libs.rxbinding_support_v4
    implementation libs.rxbinding_appcompat_v7
    implementation libs.rxbinding_design
    implementation libs.rxbinding_recyclerview_v7
    implementation libs.leakcanary_release
    implementation libs.rxandroid2
    implementation libs.rxjava2
    implementation libs.rxlifecycle2
    implementation libs.rxlifecycle_kotlin2
    implementation libs.kotlin_reflect
    implementation libs.replugin_host
    implementation libs.rxpermission2
    implementation libs.circleImageView
    implementation libs.gson
    implementation libs.glide
    implementation libs.retrofit2
    implementation libs.retrofit2_converter
    implementation libs.retrofit2_adapter
    implementation libs.multidex

    // googleLifeCycle
    implementation libs.googleLifeCycleJava
    implementation libs.googleLifeCycle
    // not needed if you are using the DefaultLifecycleObserver from common-java8 artifact
    annotationProcessor "android.arch.lifecycle:compiler:1.0.0"

    // RouterHost
    implementation libs.router_host
    annotationProcessor "com.github.yjfnypeu.Router:router-compiler:$router_version"
    // 针对Replugin的RouterHost
    implementation libs.router_replugin_host
    // 聚美优品的bundle
    implementation libs.parceler
    // 聚美优品的远程更新插件
    implementation libs.update_plugin
    // fastJson
    implementation libs.fastjson
    // QuickAdapter
    implementation libs.adapter_helper
}

task makeJar(type: Jar) {
    from file('build/intermediates/classes/release')
    baseName = 'plugin'
    destinationDir = file('build/libs')
    //过滤不需要的class
    exclude "**/**/BuildConfig.class"
    exclude "**/**/BuildConfig\$*.class"
    exclude "**/R.class"
    exclude "**/R\$*.class"
    exclude "META-INF"

    //指定打包的class
    include "com/example/llcgs/android_kotlin/plugin/interceptor/*.class"
    include "com/example/llcgs/android_kotlin/home/bean/*.class"
    include "com/example/llcgs/android_kotlin/base/spreferences/SharedPreferencesHelper.class"
}
makeJar.dependsOn(build)