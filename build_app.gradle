// 添加replugin
apply plugin: 'replugin-host-gradle'
repluginHostConfig {
    useAppCompat = true
}

repositories {
    flatDir {
        dirs 'libs'   // aar目录
    }
}

dependencies {

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation(name:'library-1.0.0', ext:'aar')
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    // kapt "com.android.databinding:compiler:$android_plugin_version"
    testImplementation 'junit:junit:4.12'

    println IsBuildMudle.toBoolean()
    if(!IsBuildMudle.toBoolean()){
        implementation project(':James')
    }else{
        implementation project(':vlayout')
    }

    implementation libs.constraint_layout
    implementation libs.cardview_v7
    implementation libs.customtabs

    /* ---Rx--- */
//    implementation libs.rxbinding_support_v4
//    implementation libs.rxbinding_appcompat_v7
//    implementation libs.rxbinding_recyclerview_v7
//    implementation libs.rxbinding_design
//    implementation libs.rxlifecycle_kotlin2
    implementation libs.rxpermission2
    implementation libs.rxbinding2
    implementation libs.rxandroid2
    implementation libs.rxjava2
    implementation libs.rxlifecycle2

    /* retrofit */
    implementation libs.retrofit2
    implementation libs.retrofit2_converter
    implementation libs.retrofit2_adapter
    implementation (libs.retrofit2_converter_xml){
        exclude group: 'xpp3', module: 'xpp3'
        exclude group: 'stax', module: 'stax-api'
        exclude group: 'stax', module: 'stax'
    }

    /* leakCanary */
    implementation libs.leakcanary_release

    /* Kotlin */
    implementation libs.kotlin_reflect

    implementation libs.replugin_host

    implementation libs.circleImageView

    /* Gson */
    implementation libs.gson

    implementation libs.glide

    implementation libs.multidex

    /*  现在 Support Library 26.1+ 已经集成了这个生命周期组件,不需要再手动引入了 */
    // googleLifeCycle
    // implementation libs.googleLifeCycleJava
    // implementation libs.googleLifeCycle
    // implementation libs.googleLifeCycleExtensions
    // not needed if you are using the DefaultLifecycleObserver from common-java8 artifact
    // annotationProcessor "android.arch.lifecycle:compiler:1.0.0"

    /* LiveData */
    implementation (libs.googleLiveData){
        exclude module: 'common'
        // 为本依赖关闭依赖传递特性
        transitive = false
    }
    //To use LiveData with ReactiveStreams API
    implementation (libs.googleLiveDataReactiveStreams){
        exclude module: 'common'
    }

    /* Room */
    implementation libs.googleRoom
    /* 使用java 需要配置annotationProcessor */
//    annotationProcessor "android.arch.persistence.room:compiler:1.0.0"
    /* 使用kotlin 需要配置kapt */
    kapt "android.arch.persistence.room:compiler:1.0.0"
    implementation libs.googleRoomRx

    /* Paging */
    //implementation libs.googlePaging


    /* RouterHost */
    implementation libs.router_api
    kapt "com.github.yjfnypeu.Router:router-compiler:$router_version"

    /* 针对RePlugin的RouterHost */
    implementation libs.router_replugin_host

    /* 聚美优品的bundle */
    implementation libs.parceler
    /* 聚美优品的远程更新插件 */
    implementation libs.update_plugin

    /* fastJson */
    implementation libs.fastjson

    /* QuickAdapter */
    implementation (libs.adapter_helper)

    /* material_preference */
    implementation (libs.material_preference){
        exclude group:'com.android.support', module:'recyclerview-v7'
    }

    /* licensesdialog */
    implementation libs.licensesdialog

    /* materialsearchview */
    implementation (libs.materialsearchview){
        exclude module: 'design'
    }

    /* wearable */
    compileOnly libs.wearable
    /* wearable_support */
    implementation libs.wearable_support

    /* gms */
    implementation libs.gms

    /* mediarouter */
    implementation libs.mediarouter

    /* exoplayer */
    implementation libs.exoplayer

    /* Tinker */
    implementation("com.tencent.tinker:tinker-android-lib:${TINKER_VERSION}") { changing = true }
    annotationProcessor("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") { changing = true }
    compileOnly("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") { changing = true }
}

configurations {
    implementation.exclude group:'android.arch.lifecycle', module: 'viewmodel'
}

task makeJar(type: Jar) {
    from file('build/intermediates/classes/release')
    baseName = 'plugin'
    destinationDir = file('build/libs')
    //过滤不需要的class
    exclude "**/**/BuildConfig.class"
    exclude "**/**/BuildConfig\$*.class"
    exclude "**/R.class"
    exclude "**/R\$*.class"
    exclude "META-INF"

    //指定打包的class
    include "com/example/llcgs/android_kotlin/plugin/interceptor/*.class"
    include "com/example/llcgs/android_kotlin/home/bean/*.class"
    include "com/example/llcgs/android_kotlin/base/spreferences/SharedPreferencesHelper.class"
}
makeJar.dependsOn(build)