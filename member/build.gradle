println IsBuildModule.toBoolean()
if(IsBuildModule.toBoolean()){
    apply plugin: 'com.android.application'
}else{
    apply plugin: 'com.android.library'
}
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'//kapt3插件

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        if (IsBuildModule.toBoolean()) {
            applicationId "com.example.llc.member"
        }
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            buildConfigField 'Boolean', 'isBuildModule', "${getIsModuleValue()}"
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            buildConfigField 'Boolean', 'isBuildModule', "${getIsModuleValue()}"
            if (IsBuildModule.toBoolean()) {
                android.applicationVariants.all { variant ->
                    variant.outputs.all {
                        outputFileName = "james.apk"
                    }
                }
            }
        }
    }

    sourceSets {
        main {
            if (IsBuildModule.toBoolean()) {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                // 放置那些只需要在 app 模式下才加载的类
                java.srcDirs 'src/main/module'
            } else {
                manifest.srcFile 'src/main/manifest/AndroidManifest.xml'
            }
        }
    }

    kapt {
        generateStubs = true
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    androidExtensions {
        experimental = true
    }

}

apply from: '../build_member.gradle'
def getIsModuleValue() {
    return rootProject.ext.plugin_version.is_build_module
}